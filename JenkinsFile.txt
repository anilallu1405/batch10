try{
    node{
        def mavenHome
        def mavenCMD
        def docker
        def dockerCMD
        def tagName = "1.0"
        
        stage('Preparation'){
            echo "Preparing the Jenkins environment with required tools..."
            mavenHome = tool name: 'maven 3', type: 'maven'
            mavenCMD = "${mavenHome}/bin/mvn"
            docker = tool name: 'docker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
            dockerCMD = "$docker/bin/docker"
        }
        
        stage('Git checkout'){
            echo "Checking out the code from git repository..."
            git 'https://github.com/anilallu1405/batch10.git'
        }
        
        stage('Build, Test and Package'){
            echo "Building the springboot application..."
            sh "${mavenCMD} clean package"
            //sh 'java -jar target/*.jar'
            
        }
        stage('Sonar Scan'){
            echo "Scanning application for vulnerabilities..."
            sh "${mavenCMD} sonar:sonar -Dsonar.host.url=http://34.93.237.58:9000/"
        }
        
        stage('publish report'){
            echo " Publishing HTML report.."
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
        }
        
        stage('Build Docker Image'){
            echo "Building docker image for springboot application ..."
            sh "${dockerCMD} build -t alluanilbsc/springbootapp:${tagName} ."
        }
    
        stage("Push Docker Image to Docker Registry"){
            echo "Pushing image to docker hub"
            withCredentials([string(credentialsId: 'dockerPwd', variable: 'dockerHubPwd')]) {
            sh "${dockerCMD} login -u alluanilbsc -p ${dockerHubPwd}"
            sh "${dockerCMD} push alluanilbsc/springbootapp:${tagName}"
            }
        }   
        
        stage('Deploy Application'){
            echo "Installing desired software.."
            echo "Bring docker service up and running"
            echo "Deploying springboot application"
            ansiblePlaybook credentialsId: 'ubuntu-ssh2', disableHostKeyChecking: true, installation: 'ansible 2.9.6', inventory: '/etc/ansible/hosts', playbook: 'deploy-playbook.yml'
        }
                
    }
}
catch(Exception err){
    echo "Exception occured..."
    currentBuild.result="FAILURE"
    emailext body: 'Your build has been unsuccessful. Check console output at $BUILD_URL to view the results.', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:', to: 'alluanilbsc@gmail.com'
}
finally {
    (currentBuild.result!= "ABORTED") && node("master") {
        echo "finally gets executed and end an email notification for every build"
        emailext body: 'Your build has been successful. Check console output at $BUILD_URL to view the results.', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:', to: 'alluanilbsc@gmail.com'
    }
    
}